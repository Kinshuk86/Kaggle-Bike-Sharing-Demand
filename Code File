---
title: "Capstone Project Bike Sharing Demand"
author: "Kinshuk Srivastava"
date: "January 9, 2016"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Introduction

Kaggle Bike Sharing Demand Competition is to combine historical usage patterns with weather data in order to forecast bike rental demand in the Capital Bikeshare program in Washington, D.C.

## Loading Required Libraries
Below code is for loading all the required libraries in the environment.

```{r message = FALSE}
library(dplyr)
library("ggplot2")
library(gridExtra)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(randomForest)
```

## Importing the Data 

Reading the Train and Test dataset :
```{r}
bike_test <- read.csv("test.csv")
bike_train <- read.csv("train.csv")
```

## Understanding the Data 

As we can see that in our Train dataset we have 12 variables. Out of which 9 are Independent variables and 3 Dependent(Predictor) variables. Our Test dataset has the 3 Dependent variables missing.

**Variable Identification**
```{r}
str(bike_train)
summary(bike_train)
tbl_df(bike_train)
```

**Independent Variables**
```{r echo = FALSE}
str(bike_train[1:9])
```

**Dependent Vairables**
```{r echo = FALSE}
str(bike_train[10:12])
```

## Data Exploration

With the below code I tried to give some meaning full information to the numbers present in the Train and Test datasets.

1. **Data Wrangling**
```{r}
bike_sharing_train <- bike_train
bike_sharing_train <- mutate(bike_sharing_train, 
                       season = ifelse(season ==1, 'Spring', season),
                       season = ifelse(season ==2, 'Summer', season),  
                       season = ifelse(season ==3, 'Fall', season),
                       season = ifelse(season ==4, 'Winter', season))

bike_test <- mutate(bike_test, 
                             season = ifelse(season ==1, 'Spring', season),
                             season = ifelse(season ==2, 'Summer', season),  
                             season = ifelse(season ==3, 'Fall', season),
                             season = ifelse(season ==4, 'Winter', season))

bike_sharing_train <- mutate(bike_sharing_train,
                        holiday = ifelse(holiday ==1, 'Public Holiday', 'Not A Public Holiday'))

bike_test <- mutate(bike_test,
                             holiday = ifelse(holiday ==1, 'Public Holiday', 'Not A Public Holiday'))
## Change Working Day with Proper Value

bike_sharing_train <- mutate(bike_sharing_train,
                        workingday = ifelse(workingday ==1, 'On Day', 'Off Day'))

bike_test <- mutate(bike_test,
                             workingday = ifelse(workingday ==1, 'On Day', 'Off Day'))

## Change Weather Situation with Proper Value

bike_sharing_train <- mutate(bike_sharing_train,
                        weather = ifelse(weather ==1, 'Clear', weather),
                        weather = ifelse(weather ==2, 'Mist', weather),
                        weather = ifelse(weather ==3, 'Light Rain/Snow', weather),
                        weather = ifelse(weather ==4, 'Heavy Rain/Snow', weather))

bike_test <- mutate(bike_test,
                             weather = ifelse(weather ==1, 'Clear', weather),
                             weather = ifelse(weather ==2, 'Mist', weather),
                             weather = ifelse(weather ==3, 'Light Rain/Snow', weather),
                             weather = ifelse(weather ==4, 'Heavy Rain/Snow', weather))
```

2. **Feature Engineering**

Feature Engineering is all about extracting some meaning full information from the existing variables. With the below code I have tried to extract some features from the existing variables.

* *Extract Year from Timestamp*
```{r}
bike_sharing_train$year=substr(bike_sharing_train$datetime,1,4)
bike_test$year=substr(bike_test$datetime,1,4)
```

* *Extract Hour from Timestamp*
```{r}
bike_sharing_train$hour=substr(bike_sharing_train$datetime,12,13)
bike_test$hour=substr(bike_test$datetime,12,13)
```

* *Extract Month from Timestamp*
```{r}
bike_sharing_train$month=substr(bike_sharing_train$datetime,6,7)
bike_test$month=substr(bike_test$datetime,6,7)
```

* *Extracting Day of Week from Timestamp*
```{r}
date = substr(bike_sharing_train$datetime,1,10)
days <- weekdays(as.Date(date))
bike_sharing_train$weekday = days

date1 = substr(bike_test$datetime,1,10)
days1 <- weekdays(as.Date(date1))
bike_test$weekday = days1
```

3. **Converting Discrete Variables into Factor**
```{r}
bike_sharing_train$season=as.factor(bike_sharing_train$season)
bike_sharing_train$weather=as.factor(bike_sharing_train$weather)
bike_sharing_train$holiday=as.factor(bike_sharing_train$holiday)
bike_sharing_train$workingday=as.factor(bike_sharing_train$workingday)
bike_sharing_train$hour=as.factor(bike_sharing_train$hour)
bike_sharing_train$hour=as.integer(bike_sharing_train$hour)


bike_test$season=as.factor(bike_test$season)
bike_test$weather=as.factor(bike_test$weather)
bike_test$holiday=as.factor(bike_test$holiday)
bike_test$workingday=as.factor(bike_test$workingday)
bike_test$hour=as.factor(bike_test$hour)
bike_test$hour=as.integer(bike_test$hour)
```

## Data Visualization

* *Examining All Variables*

The first plot I have plotted just to see the relationship among the variables.

```{r echo = FALSE}
pairs(~count+season+holiday+workingday+weather+temp+humidity+windspeed+atemp,
         data=bike_sharing_train, 
         main="Bike Sharing")
```

* *Histogram for Single Variable Analysis*

I have plotted histogram to understand the distribution among different variables.

```{r echo = FALSE}
par(mfrow=c(2,2))

 p1 <- ggplot(aes(x = season), data = bike_sharing_train) +
         geom_bar() +
         ggtitle("Season Vs Count") 
p1

p2 <- ggplot(aes(x = humidity), data = bike_sharing_train) +
  geom_bar() +
  scale_x_discrete(breaks = seq(0, 100, 10)) +
  ggtitle("Humidity Vs Count")
p2

p3 <- ggplot(aes(x = holiday), data = bike_sharing_train) +
  geom_bar() +
  ggtitle("Holiday Vs Count")
p3

p4 <- ggplot(aes(x = workingday), data = bike_sharing_train) +
  geom_bar() +
  ggtitle("Workingday Vs Count")
p4

p5 <- ggplot(aes(x = temp), data = bike_sharing_train) +
  geom_bar() + 
  ggtitle("Actual Temperature Vs Count")
p5

p6 <- ggplot(aes(x = atemp), data = bike_sharing_train) +
  geom_bar()+
  ggtitle("Feels Like Temperature Vs Count")
p6

p7 <- ggplot(aes(x = windspeed), data = bike_sharing_train) +
  geom_bar() +
  ggtitle("Windspeed Vs Count")
p7

p8 <- ggplot(aes(x = weather), data = bike_sharing_train) +
  geom_bar() +
  ggtitle("Weather Situation Vs Count")
p8

p9 <- ggplot(aes(x = weekday), data = bike_sharing_train) +
  geom_bar() +
  ggtitle("Day Of Week Vs Count")
p9

p10 <- ggplot(aes(x = hour), data = bike_sharing_train) +
  geom_bar() +
  scale_x_discrete(breaks = seq(0, 23, 2)) +
  ggtitle("Hourly Trend Vs Count")
p10
```

## Hypothesis Testing

1. *Hourly Trend*

 Plotted Boxplot to check the distribution of count over hours.
```{r echo = FALSE}
boxplot(bike_sharing_train$count~bike_sharing_train$hour,xlab="hour", ylab="count of users")
```

There are lot of outliers present. We can treat it by the log transformation or by Sqrt.

```{r echo = FALSE}
boxplot(log(bike_sharing_train$count)~bike_sharing_train$hour,xlab="hour", ylab="log(count)")
boxplot(sqrt(bike_sharing_train$count)~bike_sharing_train$hour,xlab="hour", ylab="Sqrt(count)")
```

2. *Daily Trend*

Distribution of counts over different days of week.

```{r echo = FALSE}
boxplot(bike_sharing_train$registered~bike_sharing_train$weekday,xlab="Day", ylab="Registered")
boxplot(bike_sharing_train$casual~bike_sharing_train$weekday,xlab="Day", ylab="Casual")
```

3. *Weather Trend*

Distribution of count over different types of weather.

```{r echo = FALSE}
boxplot(bike_sharing_train$registered~bike_sharing_train$weather,xlab="Day", ylab="Registered")
boxplot(bike_sharing_train$casual~bike_sharing_train$weather,xlab="Day", ylab="Casual")
```

4. *Yearly Trend*

Distribution of count over different years.

```{r echo = FALSE}
boxplot(bike_sharing_train$count~bike_sharing_train$year, xlab ="year", ylab ="count")
boxplot(bike_sharing_train$registered~bike_sharing_train$year, xlab ="year", ylab ="registered count")
boxplot(bike_sharing_train$casual~bike_sharing_train$year, xlab ="year", ylab ="casual count")
```

5. *Correlation Among Variables*

Below code is for identifying how different variables are correlated with each other.

```{r}
corrleation =data.frame(bike_sharing_train$registered,bike_sharing_train$casual,bike_sharing_train$count,bike_sharing_train$temp,bike_sharing_train$humidity,bike_sharing_train$atemp,bike_sharing_train$windspeed)
cor(corrleation)
```


## Model Building

I have used Linear Regression, Decision Trees and Random Forest for predicting the demand. Before start building models and predicting we need to add the predictor variables in our test dataset.

```{r}
bike_test$registered = 0
bike_test$casual = 0
bike_test$count = 0
```

1. **Linear Regression Model**

```{r message = FALSE}
First_lm = lm(count ~ hour + atemp + year + temp + humidity + season + windspeed + workingday + weekday + weather + holiday, data = bike_sharing_train)
summary(First_lm)

reg_pred <- predict(First_lm, bike_test)
summary(reg_pred)
SSE1 <- sum((reg_pred - bike_sharing_train$count)^2)
SSE1
SST <- sum((mean(bike_sharing_train$count) - bike_test$count)^2)
SST
R2 <- 1 - SSE1/SST
R2
```

2. *Decision Tree*

```{r echo = FALSE}
set.seed(26)
model1 = rpart(registered ~ hour + atemp + temp + humidity + season, data=bike_sharing_train)
fancyRpartPlot(model1)

model2 = rpart(casual ~ hour + atemp + temp + humidity + season,data=bike_sharing_train)
fancyRpartPlot(model2)

bike_prediction <- predict(model1, bike_test)
bike_pred_cas <- predict(model2, bike_test)

bike_test$registered <- bike_prediction
bike_test$registered <- as.integer(bike_test$registered)

bike_test$casual <- bike_pred_cas
bike_test$casual <- as.integer(bike_test$casual)

bike_test$count <- bike_test$registered + bike_test$casual

s <- data.frame(datetime=bike_test$datetime,count=bike_test$count)
```

3. *Random Forest*

* **Converting discrete variables into factors.**
```{r echo = FALSE}
set.seed(415)

bike_sharing_train$season=as.factor(bike_sharing_train$season)
bike_sharing_train$holiday=as.factor(bike_sharing_train$holiday)
bike_sharing_train$workingday=as.factor(bike_sharing_train$workingday)
bike_sharing_train$weather=as.factor(bike_sharing_train$weather)
bike_sharing_train$hour=as.factor(bike_sharing_train$hour)
bike_sharing_train$month=as.factor(bike_sharing_train$month)
bike_sharing_train$weekday=as.factor(bike_sharing_train$weekday)

bike_test$season=as.factor(bike_test$season)
bike_test$holiday=as.factor(bike_test$holiday)
bike_test$workingday=as.factor(bike_test$workingday)
bike_test$weather=as.factor(bike_test$weather)
bike_test$hour=as.factor(bike_test$hour)
bike_test$month=as.factor(bike_test$month)
bike_test$weekday=as.factor(bike_test$weekday)
```

* **First Model**
```{r}
RFM1 <- randomForest(registered ~ hour + workingday + weekday + holiday + temp + humidity + atemp +windspeed + season + weather + year, data = bike_sharing_train, importance=TRUE, ntree = 250)
print(RFM1)

RFM2 <- randomForest(casual ~ hour + workingday + weekday + holiday + temp + humidity + atemp +windspeed + season + weather + year, data = bike_sharing_train, importance=TRUE, ntree = 250)
print(RFM2)

Reg_predict <- predict(RFM1, bike_test, type = "response")
Cas_predict <- predict(RFM2, bike_test, type = "response")


bike_test$reg <- Reg_predict
bike_test$cas <- Cas_predict
bike_test$cnt <- bike_test$reg + bike_test$cas

bike_test$reg <- as.integer(bike_test$reg)
bike_test$cas <- as.integer(bike_test$cas)
bike_test$cnt <- as.integer(bike_test$cnt)
r <- data.frame(datetime=bike_test$datetime,count=bike_test$cnt)
q <- data.frame(datetime=bike_test$datetime,count=bike_test$cnt)
```

* **Second Model**
As we know there are lots of outliers in our dependent variables so we will predict the log of dependent variables.
```{r}
bike_sharing_train$reg2=bike_sharing_train$registered+1
bike_sharing_train$cas2=bike_sharing_train$casual+1
bike_sharing_train$logcas=log(bike_sharing_train$cas2)
bike_sharing_train$logreg=log(bike_sharing_train$reg2)


RFM3 <- randomForest(logreg ~ hour + year + humidity + workingday + temp + atemp + season + holiday, data = bike_sharing_train, importance=TRUE, ntree = 250)
print(RFM3)
summary(RFM3)
RFM4 <- randomForest(logcas ~ hour + year + humidity + workingday + temp + atemp + season + holiday, data = bike_sharing_train, importance=TRUE, ntree = 250)
print(RFM4)

Reg_predict2 <- predict(RFM3, bike_test, type = "response")
Cas_predict2 <- predict(RFM4, bike_test, type = "response")
summary(Reg_predict2)
bike_test$reg3 <- Reg_predict2
bike_test$cas3 <- Cas_predict2

bike_test$registered <- exp(bike_test$reg3)-1
bike_test$casual <- exp(bike_test$cas3)-1


bike_test$registered <- as.integer(bike_test$registered)
bike_test$casual <- as.integer(bike_test$casual)

bike_test$count=bike_test$registered+bike_test$casual
U <- data.frame(datetime=bike_test$datetime,count=bike_test$count)

varImpPlot(RFM3)

varImpPlot(RFM4)
```

After following the above mentioned approach I scored 0.50404 on the Kaggle leaderboard. I am still working to improve my performance.
